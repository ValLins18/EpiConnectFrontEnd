@using EpiConnectFrontEnd.Model;
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.DependencyInjection
@inject NavigationManager NavigationManager

<div class="modal fade" id="exampleModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            @if (Epi != null) {
                <div class="modal-header">

                    <h1 class="modal-title fs-5" id="exampleModalLabel">@Epi.Name</h1>
                    <button @onclick="CloseConnection" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Nivel de Bateria: @Epi.Metrics.BatteryLevel</p>
                    <p>Nivel de Ruido: @(Epi.Metrics.Noise ?? 0)</p>
                    <p>Conectado?: @(Epi.Metrics.IsContingency ? "Sim" : "Não")</p>
                    <p class="@(Epi.Metrics.IsProtected ? "text-success" : "text-danger")">Protegido?: @(Epi.Metrics.IsProtected ? "Sim" : "Não")</p>
                </div>
                <div class="modal-footer">
                    <button @onclick="CloseConnection" type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            }
            else {
                <p>Loading...</p>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EpiModel Epi { get; set; }
    [Parameter]
    public HubConnection hubConnection { get; set; }

    protected override void OnParametersSet() {
        base.OnParametersSet();
    }
    //private MetricsModel Metrics { get; set; }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
    }
    private async Task CloseConnection() {
        if (hubConnection.State == HubConnectionState.Connected) {
            await hubConnection.StopAsync();
        }
    }

}