@page "/monitoring"
@using EpiConnectFrontEnd.Model.ViewModel;
@using EpiConnectFrontEnd.Services;
@inject HttpClient Http;
@inject EmployeeService employeeService;

<PageTitle>Monitoramento</PageTitle>
<div class="container">
    <h1>Monitoramento</h1>

    <h2>Funcionarios</h2>

    @if (employees == null) {
        <p><em>Loading...</em></p>
    }
    else {
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Nome</th>
                        <th>Reponsável</th>
                        <th>Cargo</th>
                        <th>Setor</th>
                        <th>Detalhes</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employee in employees) {
                        <tr>
                            <td>@employee.Name</td>
                            <td>@employee.Phone.PhoneNumber</td>
                            <td>@employee.Post.Description</td>
                            <td>@employee.Post.Department.Description</td>
                            <td ><a href="perfil/@employee.PersonId" class="oi oi-grid-three-up"></a></td>
                            <td class="d-table-cell @(employee.IsOpenAlert ? "text-danger oi oi-circle-x" : "text-success oi oi-circle-check")"></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private EmployeeMonitoringViewModel[]? employees;

    protected override async Task OnInitializedAsync() {
        employees = await GetUpdatedsEmployees();

        var timer = new System.Timers.Timer(5000);
        timer.Elapsed += async (sender, e) =>
        {
            employees = await GetUpdatedsEmployees();
            StateHasChanged();
        };
        timer.Start();
    }

    private async Task<EmployeeMonitoringViewModel[]> GetUpdatedsEmployees() {
        await Task.Delay(1000);
        return await employeeService.GetEmployeesForMonitoringAsync();
    }


}
