@page "/perfil/{PersonId:int}"
@using EpiConnectFrontEnd.Authentication;
@using EpiConnectFrontEnd.Model;
@using Blazored.LocalStorage;
@using EpiConnectFrontEnd.Services;
@using System.Text.Json;
@using System.Text;
@inject EmployeeService employeeService;
@inject ILocalStorageService localStorage;


<h3 class="text-center">Perfil</h3>
@if (employee == null) {
    <p><em>Loading...</em></p>
}
else {
    <MeuModal Epi="@epiSelecionado" hubConnection="@hubConnection"></MeuModal>
    <div class="container">
        <div class="row justify-content-center align-items-center vh-100">
            <div class="col-md-6 p-3">
                <div class="card">
                    <div class="card-image-container align-self-center m-2">
                        <img class="card-img-top img-fluid" src="@employee.ImgPath" alt="Foto de Perfil">
                    </div>
                    <div class="card-body text-center">
                        <h5 class="card-title">Nome Completo: @employee.Name</h5>
                        <p class="card-text">Telefone: @($"{employee.Phone.DDD}{employee.Phone.PhoneNumber}")</p>
                        <p class="card-text">
                            Endereço:
                            @($"{employee.Address.Street} {employee.Address.Number}, {employee.Address.Neighborhood}, {employee.Address.City}, {employee.Address.State}")
                        </p>
                        <p class="card-text">Cargo: @employee.Post.Description</p>
                        <p class="card-text">Setor:  @employee.Post.Department.Description</p>
                        <h6 class="card-subtitle mb-2 text-muted">Lista de Equipamentos:</h6>
                        <ul class="dropdown-menu">
                            <li><h6 class="dropdown-header">Dropdown header</h6></li>
                            <li><a class="dropdown-item" href="#">Action</a></li>
                            <li><a class="dropdown-item" href="#">Another action</a></li>
                        </ul>
                    </div>
                    <div class="text-center">
                        <ul class="list-group">
                            @if (!employee.Epis.Any()) {
                                <li class="list-group-item text-danger">Não possui Epis Cadastrados</li>
                            }
                            else {
                                foreach (var epi in employee.Epis) {
                                    <li class="list-group-item">
                                        <button type="button" class="btn @SetButtomColor(epi.Alerts)" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="() => PreencherModal(epi)">@epi.Name</button>
                                    </li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int PersonId { get; set; }
    public EmployeeModel? employee;
    public EpiModel epiSelecionado;
    public HubConnection hubConnection;

    protected async override Task OnInitializedAsync() {
        employee = await GetUpdatedEmployee(PersonId);

        var timer = new System.Timers.Timer(3000);
        timer.Elapsed += async (sender, e) => {
            employee = await GetUpdatedEmployee(PersonId);
            StateHasChanged();
        };
        timer.Start();
    }

    public void PreencherModal(EpiModel epi) {
        epiSelecionado = epi;
        StartMonitoring();
    }

    private async Task StartMonitoring() {
        var loginSession = await ReadItemEncryptedAsync<LoginSession>("loginSession");
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:5001/websocket{epiSelecionado.EpiId}")
            .Build();

        hubConnection.On<MetricsModel>("ReceiveMetrics", receivedMetrics => {
            epiSelecionado.Metrics = receivedMetrics;
            StateHasChanged();
        });

        await hubConnection.StartAsync();

    }
    private async Task<EmployeeModel> GetUpdatedEmployee(int personId) {
        await Task.Delay(1000);
        return await employeeService.GetEmployeeByIdAsync(personId);

    }
    private string SetButtomColor(IEnumerable<AlertModel>? alerts) {
        if (alerts == null) {
            return "btn-primary";
        }
        var result = alerts.Any(a => a.IsOpen) ? "btn-danger" : "btn-primary";
        return result;
    }
    private async Task<T> ReadItemEncryptedAsync<T>(string key) {
        var base64Json = await localStorage.GetItemAsync<string>(key);
        var itemJsonBytes = Convert.FromBase64String(base64Json);
        var itemJson = Encoding.UTF8.GetString(itemJsonBytes);
        var item = JsonSerializer.Deserialize<T>(itemJson);
        return item;
    }

}

<!-- Certifique-se de incluir a referência ao Bootstrap no seu projeto -->
